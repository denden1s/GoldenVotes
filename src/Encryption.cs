using System.Security.Cryptography;
using System.Text;
using System.IO;
using System;

namespace Golden_votes;

public class Encryption
{
  // RSA 1024 bit pub key
  private string privateKeyPem;
  private static readonly byte[] publicKey = new byte[]
  {
    0x30, 0x81, 0x9e, 0x30, 0x0d, 0x06, 0x09, 0x2a,
    0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01,
    0x05, 0x00, 0x03, 0x81, 0x8c, 0x00, 0x30, 0x81,
    0x88, 0x02, 0x81, 0x80, 0x7c, 0xa6, 0xb7, 0xc3,
    0x22, 0x6a, 0x64, 0x8a, 0x79, 0xfa, 0x4b, 0xd8,
    0x87, 0x05, 0x3f, 0x4b, 0x6a, 0xe1, 0xc2, 0xf0,
    0x67, 0xad, 0xdd, 0xe9, 0xca, 0xb0, 0x6d, 0x9b,
    0xe1, 0x13, 0xa7, 0x4a, 0x42, 0xa5, 0x1b, 0xa1,
    0xcb, 0x59, 0x5f, 0xb8, 0x9b, 0x69, 0x29, 0x88,
    0xd5, 0x92, 0x08, 0x7c, 0x5b, 0x15, 0xa1, 0xa7,
    0xe8, 0x19, 0xfa, 0x17, 0x1d, 0x02, 0x10, 0x97,
    0xe2, 0x19, 0x7e, 0xd5, 0x40, 0xba, 0xf1, 0x93,
    0x7f, 0x8e, 0x70, 0x5e, 0xa7, 0x9c, 0x51, 0xfd,
    0xcf, 0x05, 0xea, 0xbc, 0xad, 0xbd, 0xc7, 0x95,
    0x1a, 0x40, 0x88, 0x27, 0x1a, 0x9a, 0x68, 0x17,
    0xf3, 0x47, 0xe8, 0x77, 0xfe, 0x09, 0x8f, 0xba,
    0x92, 0xa0, 0x8e, 0x54, 0x06, 0x12, 0xa7, 0x43,
    0xd6, 0xac, 0x8e, 0x06, 0x0b, 0x73, 0xff, 0xa2,
    0xd7, 0xec, 0x0c, 0xde, 0x04, 0xcd, 0x23, 0x1f,
    0xed, 0x8f, 0xa1, 0x51, 0x02, 0x03, 0x01, 0x00,
    0x01
  };

  public Encryption(string privateKeyPath)
  {
    using (StreamReader reader = new StreamReader(privateKeyPath))
    {
      privateKeyPem = reader.ReadToEnd();
    }
  }

  public string Encrypt(string plainText)
  {
    using var rsa = RSA.Create();
    rsa.ImportSubjectPublicKeyInfo(publicKey, out _);

    byte[] dataBytes = Encoding.UTF8.GetBytes(plainText);
    // Use OAEP padding with SHA-256 for security
    byte[] encryptedBytes = rsa.Encrypt(dataBytes,
                                        RSAEncryptionPadding.OaepSHA256);

    // Return as Base64 string for easy transport
    return Convert.ToBase64String(encryptedBytes);
  }

  public string Decrypt(string encryptedBase64)
  {
    byte[] encryptedBytes = Convert.FromBase64String(encryptedBase64);

    using var rsa = RSA.Create();
    rsa.ImportFromPem(privateKeyPem);

    byte[] decryptedBytes = rsa.Decrypt(encryptedBytes,
                                        RSAEncryptionPadding.OaepSHA256);

    return Encoding.UTF8.GetString(decryptedBytes);
  }

  public string Hash(string plainText)
  {
    var inputBytes = Encoding.UTF8.GetBytes(plainText);
    var inputHash = SHA256.HashData(inputBytes);
    return Convert.ToHexString(inputHash);
  }
}
